name: TWSE-TPEX KD Screener

on:
  workflow_dispatch:
  schedule:
    # 每個交易日台灣時間 14:05 執行（UTC+8 -> UTC 06:05）
    - cron: "5 6 * * 1-5"

permissions:
  contents: read

jobs:
  run-screener:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Taipei
      PYTHONUNBUFFERED: "1"

      # ---- 這些是 .env 的預設值（可依喜好調整）----
      TOP_N: "30"
      KD_N: "9"
      KD_K_SMOOTH: "3"
      KD_D_PERIOD: "3"
      KD_CROSS_WINDOW: "3"
      KD_REQUIRE_ZONE: "false"
      KD_ZONE_LOW: "40"
      KD_ZONE_HIGH: "80"

      VOLUME_LOOKBACK: "20"
      VOLUME_MULTIPLIER: "1.2"
      LIQ_MIN_VOL_LAST10: "300000"

      ENABLE_RULE_BLACK_CANDLE_LIMIT: "true"
      BLACK_CANDLE_MAX_DROP: "0.95"
      ENABLE_RULE_OC_ABOVE_MA20: "true"
      ENABLE_RULE_LAST5_MA10_THRESHOLD: "true"
      MAX_DAYS_BELOW_MA10_IN_5: "3"
      ENABLE_RULE_MA5_GT_MA20: "true"

      MARKET_CAP_MIN: "5000000000"
      BATCH_SIZE: "120"
      CONTINUATION_KEY: "yahoo"
      INCLUDE_TPEX: "true"

      # 從 Secrets 帶入（若沒填會是空字串，程式會自動略過 Telegram）
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout
      # 取到你的程式碼
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 取回上次的 state/（保存連續出現天數 streak）
      - name: Restore state cache
        id: restore-state
        uses: actions/cache/restore@v4
        with:
          path: state
          key: streaks-${{ runner.os }}-v1
          restore-keys: |
            streaks-${{ runner.os }}-

      # 產生 .env 到「repo 根目錄」
      - name: Render .env
        run: |
          cat > .env << 'EOF'
          TOP_N=${TOP_N}
          KD_N=${KD_N}
          KD_K_SMOOTH=${KD_K_SMOOTH}
          KD_D_PERIOD=${KD_D_PERIOD}
          KD_CROSS_WINDOW=${KD_CROSS_WINDOW}
          KD_REQUIRE_ZONE=${KD_REQUIRE_ZONE}
          KD_ZONE_LOW=${KD_ZONE_LOW}
          KD_ZONE_HIGH=${KD_ZONE_HIGH}

          VOLUME_LOOKBACK=${VOLUME_LOOKBACK}
          VOLUME_MULTIPLIER=${VOLUME_MULTIPLIER}
          LIQ_MIN_VOL_LAST10=${LIQ_MIN_VOL_LAST10}

          ENABLE_RULE_BLACK_CANDLE_LIMIT=${ENABLE_RULE_BLACK_CANDLE_LIMIT}
          BLACK_CANDLE_MAX_DROP=${BLACK_CANDLE_MAX_DROP}
          ENABLE_RULE_OC_ABOVE_MA20=${ENABLE_RULE_OC_ABOVE_MA20}
          ENABLE_RULE_LAST5_MA10_THRESHOLD=${ENABLE_RULE_LAST5_MA10_THRESHOLD}
          MAX_DAYS_BELOW_MA10_IN_5=${MAX_DAYS_BELOW_MA10_IN_5}
          ENABLE_RULE_MA5_GT_MA20=${ENABLE_RULE_MA5_GT_MA20}

          MARKET_CAP_MIN=${MARKET_CAP_MIN}
          BATCH_SIZE=${BATCH_SIZE}
          CONTINUATION_KEY=${CONTINUATION_KEY}
          INCLUDE_TPEX=${INCLUDE_TPEX}

          TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
          TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
          EOF
          echo "Wrote $(pwd)/.env"

      - name: Show tree (for debug)
        run: |
          sudo apt-get update && sudo apt-get install -y tree
          tree -a -L 2

      - name: Run screener
        run: |
          python src/main.py || true

      # 保存 state（包含 state/streaks.json）
      - name: Save state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state
          key: streaks-${{ runner.os }}-v1

      - name: Upload artifacts (CSV & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screener-artifacts
          path: |
            output/*.csv
            logs/*
          if-no-files-found: warn
